{
  "language": "Solidity",
  "sources": {
    "contracts/GuildAuctionQueueFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./oz/Clones.sol\";\nimport \"./interfaces/IGuildAuctionQueue.sol\";\n\ncontract GuildAuctionQueueFactory {\n    address public immutable implementation;\n\n    constructor(address _implementation) {\n        require(_implementation != address(0), \"invalid implementation\");\n\n        implementation = _implementation;\n    }\n\n    function create(\n        address _token,\n        address _moloch,\n        address _destination,\n        uint256 _lockupPeriod\n    ) external returns (address) {\n        //\n        address queueAddress = Clones.clone(implementation);\n\n        _init(queueAddress, _token, _moloch, _destination, _lockupPeriod);\n\n        return queueAddress;\n    }\n\n    function createDeterministic(\n        address _token,\n        address _moloch,\n        address _destination,\n        uint256 _lockupPeriod,\n        bytes32 _salt\n    ) external returns (address) {\n        //\n        address queueAddress = Clones.cloneDeterministic(implementation, _salt);\n\n        _init(queueAddress, _token, _moloch, _destination, _lockupPeriod);\n\n        return queueAddress;\n    }\n\n    function predictDeterministicAddress(bytes32 _salt)\n        external\n        view\n        returns (address)\n    {\n        return Clones.predictDeterministicAddress(implementation, _salt);\n    }\n\n    function _init(\n        address _queueAddress,\n        address _token,\n        address _moloch,\n        address _destination,\n        uint256 _lockupPeriod\n    ) internal {\n        IGuildAuctionQueue(_queueAddress).init(\n            _token,\n            _moloch,\n            _destination,\n            _lockupPeriod\n        );\n\n        emit NewQueue(_queueAddress, _token, _moloch, _destination);\n    }\n\n    // Event\n\n    event NewQueue(\n        address queueAddress,\n        address token,\n        address moloch,\n        address destination\n    );\n}\n"
    },
    "contracts/oz/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\n            )\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IGuildAuctionQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IGuildAuctionQueue {\n    function init(\n        address token,\n        address moloch,\n        address destination,\n        uint256 lockupPeriod\n    ) external;\n\n    function submitBid(uint256 amount, bytes32 details) external;\n\n    function increaseBid(uint256 amount, uint256 id) external;\n\n    function withdrawBid(uint256 amount, uint32 id) external;\n\n    function cancelBid(uint256 id) external;\n\n    function acceptBid(uint256 id) external;\n\n    function isMember(address user) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}