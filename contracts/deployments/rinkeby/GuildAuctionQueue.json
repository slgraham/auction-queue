{
  "address": "0x95647F88dcbC12986046fc4f49064Edd11a25d38",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "acceptedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BidAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BidCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BidIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BidWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "details",
          "type": "bytes32"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "acceptBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "details",
          "type": "bytes32"
        },
        {
          "internalType": "enum GuildAuctionQueue.BidStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancelBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "increaseBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_moloch",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lockupPeriod",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moloch",
      "outputs": [
        {
          "internalType": "contract IMOLOCH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newBidId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_details",
          "type": "bytes32"
        }
      ],
      "name": "submitBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_id",
          "type": "uint32"
        }
      ],
      "name": "withdrawBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1a7367251d4509f547fe4f654c050cbaf1ab6dc58ae11ddaca280a14a668a3a",
  "receipt": {
    "to": null,
    "from": "0xf48928b8d6C04122778aD74C64886D972decA39F",
    "contractAddress": "0x95647F88dcbC12986046fc4f49064Edd11a25d38",
    "transactionIndex": 6,
    "gasUsed": "1015499",
    "logsBloom": "0x
    "blockHash": "0x1dab8579b17ab554e7fa54929e5fb84169f692aa9c5acd4c8058c3312d730acd",
    "transactionHash": "0xc1a7367251d4509f547fe4f654c050cbaf1ab6dc58ae11ddaca280a14a668a3a",
    "logs": [],
    "blockNumber": 8765685,
    "cumulativeGasUsed": "3710060",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "76d3815e87d650a718b39e4e3f2b939b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acceptedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BidCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"},{\"internalType\":\"enum GuildAuctionQueue.BidStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"increaseBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_moloch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moloch\",\"outputs\":[{\"internalType\":\"contract IMOLOCH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newBidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_details\",\"type\":\"bytes32\"}],\"name\":\"submitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GuildAuctionQueue.sol\":\"GuildAuctionQueue\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/GuildAuctionQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IMOLOCH.sol\\\";\\nimport \\\"./oz/ReentrancyGuard.sol\\\";\\nimport \\\"./oz/Initializable.sol\\\";\\n\\ncontract GuildAuctionQueue is ReentrancyGuard, Initializable {\\n    IERC20 public token;\\n    IMOLOCH public moloch;\\n    address public destination; // where tokens go when bids are accepted\\n    uint256 public lockupPeriod; // period for which bids are locked and cannot be withdrawn, in seconds\\n    uint256 public newBidId; // the id of the next bid to be submitted; starts at 0\\n\\n    // -- Data Models --\\n\\n    mapping(uint256 => Bid) public bids;\\n\\n    enum BidStatus {queued, accepted, cancelled}\\n\\n    struct Bid {\\n        uint256 amount;\\n        address submitter;\\n        uint256 createdAt; // block.timestamp from tx when bid was created\\n        bytes32 details; // details of bid, eg an IPFS hash\\n        BidStatus status;\\n    }\\n\\n    // -- Functions --\\n\\n    function init(\\n        address _token,\\n        address _moloch,\\n        address _destination,\\n        uint256 _lockupPeriod\\n    ) external initializer {\\n        token = IERC20(_token);\\n        moloch = IMOLOCH(_moloch);\\n        destination = _destination;\\n        lockupPeriod = _lockupPeriod;\\n    }\\n\\n    function submitBid(uint256 _amount, bytes32 _details)\\n        external\\n        nonReentrant\\n    {\\n        require(\\n            token.transferFrom(msg.sender, address(this), _amount),\\n            \\\"token transfer failed\\\"\\n        );\\n\\n        Bid storage bid = bids[newBidId];\\n\\n        bid.amount = _amount;\\n        bid.submitter = msg.sender;\\n        bid.details = _details;\\n        bid.status = BidStatus.queued;\\n\\n        bid.createdAt = block.timestamp;\\n        uint256 id = newBidId;\\n        newBidId++;\\n\\n        emit NewBid(_amount, msg.sender, id, _details);\\n    }\\n\\n    function increaseBid(uint256 _amount, uint256 _id) external nonReentrant {\\n        require(_id < newBidId, \\\"invalid bid\\\");\\n        Bid storage bid = bids[_id];\\n        require(bid.status == BidStatus.queued, \\\"bid inactive\\\");\\n        require(bid.submitter == msg.sender, \\\"must be submitter\\\");\\n\\n        require(\\n            token.transferFrom(msg.sender, address(this), _amount),\\n            \\\"token transfer failed\\\"\\n        );\\n\\n        bid.amount += _amount;\\n\\n        emit BidIncreased(bid.amount, _id);\\n    }\\n\\n    function withdrawBid(uint256 _amount, uint32 _id) external nonReentrant {\\n        require(_id < newBidId, \\\"invalid bid\\\");\\n        Bid storage bid = bids[_id];\\n        require(bid.status == BidStatus.queued, \\\"bid inactive\\\");\\n\\n        require(bid.submitter == msg.sender, \\\"must be submitter\\\");\\n\\n        require(\\n            (bid.createdAt + lockupPeriod) < block.timestamp,\\n            \\\"lockupPeriod not over\\\"\\n        );\\n\\n        bid.amount -= _amount; // reverts on underflow\\n\\n        require(token.transfer(msg.sender, _amount), \\\"token transfer failed\\\");\\n\\n        emit BidWithdrawn(bid.amount, _id);\\n    }\\n\\n    function cancelBid(uint256 _id) external nonReentrant {\\n        require(_id < newBidId, \\\"invalid bid\\\");\\n        Bid storage bid = bids[_id];\\n        require(bid.status == BidStatus.queued, \\\"bid inactive\\\");\\n\\n        require(bid.submitter == msg.sender, \\\"must be submitter\\\");\\n\\n        require(\\n            (bid.createdAt + lockupPeriod) < block.timestamp,\\n            \\\"lockupPeriod not over\\\"\\n        );\\n\\n        bid.status = BidStatus.cancelled;\\n\\n        require(token.transfer(msg.sender, bid.amount));\\n\\n        emit BidCanceled(_id);\\n    }\\n\\n    function acceptBid(uint256 _id) external memberOnly nonReentrant {\\n        require(_id < newBidId, \\\"invalid bid\\\");\\n        Bid storage bid = bids[_id];\\n        require(bid.status == BidStatus.queued, \\\"bid inactive\\\");\\n\\n        bid.status = BidStatus.accepted;\\n\\n        require(token.transfer(destination, bid.amount));\\n\\n        emit BidAccepted(msg.sender, _id);\\n    }\\n\\n    // -- Helper Functions --\\n\\n    function isMember(address user) public view returns (bool) {\\n        (, uint256 shares, , , , ) = moloch.members(user);\\n        return shares > 0;\\n    }\\n\\n    // -- Modifiers --\\n    modifier memberOnly() {\\n        require(isMember(msg.sender), \\\"not member of moloch\\\");\\n        _;\\n    }\\n\\n    // -- Events --\\n\\n    event NewBid(\\n        uint256 amount,\\n        address submitter,\\n        uint256 id,\\n        bytes32 details\\n    );\\n    event BidIncreased(uint256 newAmount, uint256 id);\\n    event BidWithdrawn(uint256 newAmount, uint256 id);\\n    event BidCanceled(uint256 id);\\n    event BidAccepted(address acceptedBy, uint256 id);\\n}\\n\",\"keccak256\":\"0x8bbf465fc7581419d69376c047399ec8154ec5d06f79e4eb4ac8b396fecdee1a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/interfaces/IMOLOCH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMOLOCH {\\n    // brief interface for moloch dao v2\\n\\n    function depositToken() external view returns (address);\\n\\n    function tokenWhitelist(address token) external view returns (bool);\\n\\n    function getProposalFlags(uint256 proposalId)\\n        external\\n        view\\n        returns (bool[6] memory);\\n\\n    function members(address user)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function userTokenBalances(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function cancelProposal(uint256 proposalId) external;\\n\\n    function submitProposal(\\n        address applicant,\\n        uint256 sharesRequested,\\n        uint256 lootRequested,\\n        uint256 tributeOffered,\\n        address tributeToken,\\n        uint256 paymentRequested,\\n        address paymentToken,\\n        string calldata details\\n    ) external returns (uint256);\\n\\n    function withdrawBalance(address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x26ae9b85b0c90598cefd21f8e0597fd1d8c4d6c327e2b68e13b005321198a3e1\",\"license\":\"MIT\"},\"contracts/oz/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04ad3c77a6a5006b66f1642cc3353b8009215d734eb80f069ed42a6c09460391\",\"license\":\"MIT\"},\"contracts/oz/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 709,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 658,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 661,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 12,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "token",
        "offset": 2,
        "slot": "1",
        "type": "t_contract(IERC20)569"
      },
      {
        "astId": 15,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "moloch",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMOLOCH)652"
      },
      {
        "astId": 17,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "destination",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 19,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "lockupPeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 21,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "newBidId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "bids",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Bid)42_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)569": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMOLOCH)652": {
        "encoding": "inplace",
        "label": "contract IMOLOCH",
        "numberOfBytes": "20"
      },
      "t_enum(BidStatus)30": {
        "encoding": "inplace",
        "label": "enum GuildAuctionQueue.BidStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Bid)42_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GuildAuctionQueue.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)42_storage"
      },
      "t_struct(Bid)42_storage": {
        "encoding": "inplace",
        "label": "struct GuildAuctionQueue.Bid",
        "members": [
          {
            "astId": 32,
            "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34,
            "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
            "label": "submitter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 36,
            "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
            "label": "createdAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 38,
            "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
            "label": "details",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 41,
            "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(BidStatus)30"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}