{
  "address": "0x9b50AB91b3ffBcdd5d5Ed49eD70bf299434C955C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "acceptedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BidAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BidCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BidIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "BidWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "details",
          "type": "bytes32"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "acceptBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "enum GuildAuctionQueue.BidStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancelBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "increaseBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lockupPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minShares",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "membersCanAccept",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newBidId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_details",
          "type": "bytes32"
        }
      ],
      "name": "submitBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_id",
          "type": "uint32"
        }
      ],
      "name": "withdrawBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaeaddafd20c639cb310bb44e64efba43152a3bd167f506bda28a2071f64378f4",
  "receipt": {
    "to": null,
    "from": "0xf48928b8d6C04122778aD74C64886D972decA39F",
    "contractAddress": "0x9b50AB91b3ffBcdd5d5Ed49eD70bf299434C955C",
    "transactionIndex": 4,
    "gasUsed": "1180003",
    "logsBloom": "0x
    "blockHash": "0x9d9f28968bc1eba16e280ccd7edc3f60e21c3b8a476594abf11119e873cade65",
    "transactionHash": "0xaeaddafd20c639cb310bb44e64efba43152a3bd167f506bda28a2071f64378f4",
    "logs": [],
    "blockNumber": 8810936,
    "cumulativeGasUsed": "1613793",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c12555f975b5969136770e6f4db12879",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acceptedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BidCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"enum GuildAuctionQueue.BidStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"increaseBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minShares\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membersCanAccept\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newBidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_details\",\"type\":\"bytes32\"}],\"name\":\"submitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GuildAuctionQueue.sol\":\"GuildAuctionQueue\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/GuildAuctionQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IMOLOCH.sol\\\";\\nimport \\\"./interfaces/IMinion.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract GuildAuctionQueue is ReentrancyGuard, Initializable {\\n    IERC20 public token;\\n    address public owner; // typically a dao's minion\\n    address public destination; // where tokens go when bids are accepted\\n    uint256 public lockupPeriod; // period for which bids are locked and cannot be withdrawn, in seconds\\n    uint256 public minBid; // adjustable by the owner\\n\\n    uint256 public membersCanAccept; // whether moloch members can accept bids individually, or if the owner must do so (eg with a minion proposal)\\n    uint256 public minShares; // the number of moloch shares a member must have to be eligible to accept a bid; only set if memberCanAccept == 1\\n\\n    uint256 public newBidId; // the id of the next bid to be submitted; starts at 0\\n\\n    // -- Data Models --\\n\\n    mapping(uint256 => Bid) public bids;\\n\\n    enum BidStatus {queued, accepted, cancelled}\\n\\n    struct Bid {\\n        uint256 amount;\\n        address submitter;\\n        uint256 createdAt; // block.timestamp from tx when bid was created\\n        BidStatus status;\\n    }\\n\\n    // -- Functions --\\n\\n    function init(\\n        address _owner,\\n        address _token,\\n        address _destination,\\n        uint256 _lockupPeriod,\\n        uint256 _minBid,\\n        uint256 _minShares\\n    ) external initializer {\\n        require(_token != address(0), \\\"invalid token\\\");\\n        require(_destination != address(0), \\\"invalid destination\\\");\\n\\n        if (_minShares > 0) {\\n            minShares = _minShares;\\n            membersCanAccept = 1;\\n        }\\n        // else: solidity uints default to 0 so no need to explicitly set minShares or membersCanAccept to 0\\n\\n        token = IERC20(_token);\\n        destination = _destination;\\n        lockupPeriod = _lockupPeriod;\\n        minBid = _minBid;\\n        owner = _owner;\\n    }\\n\\n    function submitBid(uint256 _amount, bytes32 _details)\\n        external\\n        nonReentrant\\n    {\\n        require(_amount >= minBid, \\\"bid too low\\\");\\n\\n        require(\\n            token.transferFrom(msg.sender, address(this), _amount),\\n            \\\"token transfer failed\\\"\\n        );\\n\\n        Bid storage bid = bids[newBidId];\\n\\n        bid.amount = _amount;\\n        bid.submitter = msg.sender;\\n        bid.status = BidStatus.queued;\\n\\n        bid.createdAt = block.timestamp;\\n        uint256 id = newBidId;\\n        newBidId++;\\n\\n        emit NewBid(_amount, msg.sender, id, _details);\\n    }\\n\\n    function increaseBid(uint256 _amount, uint256 _id) external nonReentrant {\\n        require(_id < newBidId, \\\"invalid bid\\\");\\n        Bid storage bid = bids[_id];\\n        require(bid.status == BidStatus.queued, \\\"bid inactive\\\");\\n\\n        require(\\n            token.transferFrom(msg.sender, address(this), _amount),\\n            \\\"token transfer failed\\\"\\n        );\\n\\n        bid.amount += _amount;\\n\\n        emit BidIncreased(bid.amount, _id);\\n    }\\n\\n    function withdrawBid(uint256 _amount, uint32 _id) external nonReentrant {\\n        require(_id < newBidId, \\\"invalid bid\\\");\\n        Bid storage bid = bids[_id];\\n        require(bid.status == BidStatus.queued, \\\"bid inactive\\\");\\n\\n        require(bid.submitter == msg.sender, \\\"!submitter\\\");\\n        require(bid.amount - _amount >= minBid, \\\"remaining bid too low\\\");\\n\\n        require(\\n            (bid.createdAt + lockupPeriod) < block.timestamp,\\n            \\\"lockupPeriod not over\\\"\\n        );\\n\\n        bid.amount -= _amount; // reverts on underflow\\n\\n        require(token.transfer(msg.sender, _amount), \\\"token transfer failed\\\");\\n\\n        emit BidWithdrawn(bid.amount, _id);\\n    }\\n\\n    function cancelBid(uint256 _id) external nonReentrant {\\n        require(_id < newBidId, \\\"invalid bid\\\");\\n        Bid storage bid = bids[_id];\\n        require(bid.status == BidStatus.queued, \\\"bid inactive\\\");\\n\\n        require(bid.submitter == msg.sender, \\\"!submitter\\\");\\n\\n        require(\\n            (bid.createdAt + lockupPeriod) < block.timestamp,\\n            \\\"lockupPeriod not over\\\"\\n        );\\n\\n        bid.status = BidStatus.cancelled;\\n\\n        require(token.transfer(msg.sender, bid.amount));\\n\\n        emit BidCanceled(_id);\\n    }\\n\\n    function acceptBid(uint256 _id) external accepterOnly nonReentrant {\\n        require(_id < newBidId, \\\"invalid bid\\\");\\n        Bid storage bid = bids[_id];\\n        require(bid.status == BidStatus.queued, \\\"bid inactive\\\");\\n\\n        bid.status = BidStatus.accepted;\\n\\n        require(token.transfer(destination, bid.amount));\\n\\n        emit BidAccepted(msg.sender, _id);\\n    }\\n\\n    // -- Helper Functions --\\n\\n    function isMember(address user) public view returns (bool) {\\n        // if owner is a minion, fetch its moloch parent\\n        IMinion maybeMinion = IMinion(owner);\\n        address molochAddress = maybeMinion.moloch(); // reverts if owner doesn't have a moloch getter\\n\\n        IMOLOCH moloch = IMOLOCH(molochAddress);\\n        address member = moloch.memberAddressByDelegateKey(user);\\n        (, uint256 shares, , , , ) = moloch.members(member);\\n        return shares >= minShares;\\n    }\\n\\n    // -- Modifiers --\\n    modifier accepterOnly() {\\n        if (membersCanAccept == 1) {\\n            require(isMember(msg.sender), \\\"!full moloch member\\\");\\n        } else {\\n            require(msg.sender == owner, \\\"!owner\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    // -- Events --\\n\\n    event NewBid(\\n        uint256 amount,\\n        address submitter,\\n        uint256 id,\\n        bytes32 details\\n    );\\n    event BidIncreased(uint256 newAmount, uint256 id);\\n    event BidWithdrawn(uint256 newAmount, uint256 id);\\n    event BidCanceled(uint256 id);\\n    event BidAccepted(address acceptedBy, uint256 id);\\n}\\n\",\"keccak256\":\"0x0e34639a682e1f35839cdffc768925a3e0c9d42858a2f38303f82863c13286fd\",\"license\":\"MIT\"},\"contracts/interfaces/IMOLOCH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMOLOCH {\\n    // brief interface for moloch dao v2\\n\\n    function depositToken() external view returns (address);\\n\\n    function tokenWhitelist(address token) external view returns (bool);\\n\\n    function getProposalFlags(uint256 proposalId)\\n        external\\n        view\\n        returns (bool[6] memory);\\n\\n    function members(address user)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function memberAddressByDelegateKey(address user)\\n        external\\n        view\\n        returns (address);\\n\\n    function userTokenBalances(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function cancelProposal(uint256 proposalId) external;\\n\\n    function submitProposal(\\n        address applicant,\\n        uint256 sharesRequested,\\n        uint256 lootRequested,\\n        uint256 tributeOffered,\\n        address tributeToken,\\n        uint256 paymentRequested,\\n        address paymentToken,\\n        string calldata details\\n    ) external returns (uint256);\\n\\n    function withdrawBalance(address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa5caf8a75716fc183c96e324734efb1c6c8209bc1ea8613b919a41e6e3b1afe6\",\"license\":\"MIT\"},\"contracts/interfaces/IMinion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMinion {\\n    function moloch() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdaa369a660f51b5843342a4baf0d9296846cc25460f9ff3b315b4681a419e85e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000556113fb806100256000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063ce37387011610066578063ce373870146101e9578063ee947a7c146101fc578063f344be4614610204578063fc0c546a1461021757610100565b80638da5cb5b146101995780639703ef35146101ae578063a230c524146101c1578063b269681d146101e157610100565b80633c3b1795116100d35780633c3b17951461015e5780633e109a19146101665780634423c5f11461016e5780637ef7e2e61461019157610100565b806319fcfab1146101055780631dd92a661461011a5780632a993e621461012d5780632b1fd58a1461014b575b600080fd5b610118610113366004610fb9565b61021f565b005b610118610128366004610fb9565b6103b3565b610135610552565b60405161014291906112b4565b60405180910390f35b610118610159366004610fa1565b610558565b61013561073d565b610135610743565b61018161017c366004610fa1565b610749565b60405161014294939291906112e1565b61013561077d565b6101a1610783565b6040516101429190611011565b6101186101bc366004610fa1565b610792565b6101d46101cf366004610e8a565b61095d565b6040516101429190611062565b6101a1610afb565b6101186101f7366004610ec9565b610b0a565b610135610c3c565b610118610212366004610fda565b610c42565b6101a1610e65565b6002600054141561024b5760405162461bcd60e51b81526004016102429061125d565b60405180910390fd5b60026000556005548210156102725760405162461bcd60e51b815260040161024290611092565b6001546040516323b872dd60e01b8152620100009091046001600160a01b0316906323b872dd906102ab90339030908790600401611025565b602060405180830381600087803b1580156102c557600080fd5b505af11580156102d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fd9190610f87565b6103195760405162461bcd60e51b81526004016102429061110c565b6008805460009081526009602052604081208481556001810180546001600160a01b0319163317905560038101805460ff191690554260028201558254909290918291906103668361137c565b91905055507fe6dcca7407be6b00aeaa48976c2ae152e8d7cc8a16074825c3546be778eda6fa843383866040516103a094939291906112bd565b60405180910390a1505060016000555050565b600260005414156103d65760405162461bcd60e51b81526004016102429061125d565b600260005560085481106103fc5760405162461bcd60e51b81526004016102429061106d565b600081815260096020526040812090600382015460ff16600281111561043257634e487b7160e01b600052602160045260246000fd5b1461044f5760405162461bcd60e51b8152600401610242906110e6565b6001546040516323b872dd60e01b8152620100009091046001600160a01b0316906323b872dd9061048890339030908890600401611025565b602060405180830381600087803b1580156104a257600080fd5b505af11580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da9190610f87565b6104f65760405162461bcd60e51b81526004016102429061110c565b8281600001600082825461050a919061134d565b909155505080546040517eaf2e2a3e39505661009eb9f5ad582e286bfa100a4a613d3889d645468942349161054091859061132b565b60405180910390a15050600160005550565b60065481565b6006546001141561058d5761056c3361095d565b6105885760405162461bcd60e51b815260040161024290611230565b6105b7565b6002546001600160a01b031633146105b75760405162461bcd60e51b815260040161024290611294565b600260005414156105da5760405162461bcd60e51b81526004016102429061125d565b600260005560085481106106005760405162461bcd60e51b81526004016102429061106d565b600081815260096020526040812090600382015460ff16600281111561063657634e487b7160e01b600052602160045260246000fd5b146106535760405162461bcd60e51b8152600401610242906110e6565b60038181018054600160ff199091168117909155549054825460405163a9059cbb60e01b81526001600160a01b036201000090940484169363a9059cbb936106a093911691600401611049565b602060405180830381600087803b1580156106ba57600080fd5b505af11580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190610f87565b6106fb57600080fd5b7f68113ca7b748f7d17637d79856900bc9336b88166e726bc9b55c62a39408b407338360405161072c929190611049565b60405180910390a150506001600055565b60075481565b60055481565b600960205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169160ff1684565b60085481565b6002546001600160a01b031681565b600260005414156107b55760405162461bcd60e51b81526004016102429061125d565b600260005560085481106107db5760405162461bcd60e51b81526004016102429061106d565b600081815260096020526040812090600382015460ff16600281111561081157634e487b7160e01b600052602160045260246000fd5b1461082e5760405162461bcd60e51b8152600401610242906110e6565b60018101546001600160a01b0316331461085a5760405162461bcd60e51b81526004016102429061120c565b42600454826002015461086d919061134d565b1061088a5760405162461bcd60e51b8152600401610242906110b7565b600381018054600260ff19909116179055600154815460405163a9059cbb60e01b8152620100009092046001600160a01b03169163a9059cbb916108d391339190600401611049565b602060405180830381600087803b1580156108ed57600080fd5b505af1158015610901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109259190610f87565b61092e57600080fd5b7ff72c9cb76aa633bc9310fa98738d474339fdf2f23dfac70ccbd65e593f6654df8260405161072c91906112b4565b6002546040805163623d9ac960e01b815290516000926001600160a01b0316918391839163623d9ac9916004808301926020929190829003018186803b1580156109a657600080fd5b505afa1580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109de9190610ead565b60405163100b05e560e21b815290915081906000906001600160a01b0383169063402c179490610a12908990600401611011565b60206040518083038186803b158015610a2a57600080fd5b505afa158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a629190610ead565b90506000826001600160a01b03166308ae4b0c836040518263ffffffff1660e01b8152600401610a929190611011565b60c06040518083038186803b158015610aaa57600080fd5b505afa158015610abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae29190610f2d565b505060075490921015985050505050505050505b919050565b6003546001600160a01b031681565b600154610100900460ff1680610b23575060015460ff16155b610b3f5760405162461bcd60e51b81526004016102429061116a565b600154610100900460ff16158015610b69576001805460ff1961ff00199091166101001716811790555b6001600160a01b038616610b8f5760405162461bcd60e51b8152600401610242906111e5565b6001600160a01b038516610bb55760405162461bcd60e51b8152600401610242906111b8565b8115610bc657600782905560016006555b600180546001600160a01b03808916620100000262010000600160b01b031990921691909117909155600380548783166001600160a01b0319918216179091556004869055600585905560028054928a16929091169190911790558015610c33576001805461ff00191690555b50505050505050565b60045481565b60026000541415610c655760405162461bcd60e51b81526004016102429061125d565b600260005560085463ffffffff821610610c915760405162461bcd60e51b81526004016102429061106d565b63ffffffff8116600090815260096020526040812090600382015460ff166002811115610cce57634e487b7160e01b600052602160045260246000fd5b14610ceb5760405162461bcd60e51b8152600401610242906110e6565b60018101546001600160a01b03163314610d175760405162461bcd60e51b81526004016102429061120c565b6005548154610d27908590611365565b1015610d455760405162461bcd60e51b81526004016102429061113b565b426004548260020154610d58919061134d565b10610d755760405162461bcd60e51b8152600401610242906110b7565b82816000016000828254610d899190611365565b909155505060015460405163a9059cbb60e01b8152620100009091046001600160a01b03169063a9059cbb90610dc59033908790600401611049565b602060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190610f87565b610e335760405162461bcd60e51b81526004016102429061110c565b80546040517f6415d97b7a9df23899954c482911f3fc2cb8afff4b6b15e788859e1307de227a91610540918590611339565b6001546201000090046001600160a01b031681565b80518015158114610af657600080fd5b600060208284031215610e9b578081fd5b8135610ea6816113ad565b9392505050565b600060208284031215610ebe578081fd5b8151610ea6816113ad565b60008060008060008060c08789031215610ee1578182fd5b8635610eec816113ad565b95506020870135610efc816113ad565b94506040870135610f0c816113ad565b959894975094956060810135955060808101359460a0909101359350915050565b60008060008060008060c08789031215610f45578182fd5b8651610f50816113ad565b6020880151604089015191975095509350610f6d60608801610e7a565b92506080870151915060a087015190509295509295509295565b600060208284031215610f98578081fd5b610ea682610e7a565b600060208284031215610fb2578081fd5b5035919050565b60008060408385031215610fcb578182fd5b50508035926020909101359150565b60008060408385031215610fec578182fd5b82359150602083013563ffffffff81168114611006578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6020808252600b908201526a1a5b9d985b1a5908189a5960aa1b604082015260600190565b6020808252600b908201526a62696420746f6f206c6f7760a81b604082015260600190565b6020808252601590820152743637b1b5bab82832b934b7b2103737ba1037bb32b960591b604082015260600190565b6020808252600c908201526b62696420696e61637469766560a01b604082015260600190565b6020808252601590820152741d1bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b60208082526015908201527472656d61696e696e672062696420746f6f206c6f7760581b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526013908201527234b73b30b634b2103232b9ba34b730ba34b7b760691b604082015260600190565b6020808252600d908201526c34b73b30b634b2103a37b5b2b760991b604082015260600190565b6020808252600a908201526910b9bab136b4ba3a32b960b11b604082015260600190565b60208082526013908201527210b33ab6361036b7b637b1b41036b2b6b132b960691b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526006908201526510b7bbb732b960d11b604082015260600190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b8481526001600160a01b038416602082015260408101839052608081016003831061131c57634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b918252602082015260400190565b91825263ffffffff16602082015260400190565b6000821982111561136057611360611397565b500190565b60008282101561137757611377611397565b500390565b600060001982141561139057611390611397565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146113c257600080fd5b5056fea2646970667358221220792e886fb09c80b0a347c0f3f4c73db7a048152f5c56f57adadcd0a1857bd91b64736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 732,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "token",
        "offset": 2,
        "slot": "1",
        "type": "t_contract(IERC20)670"
      },
      {
        "astId": 734,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 736,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "destination",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 738,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "lockupPeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 740,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "minBid",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 742,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "membersCanAccept",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 744,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "minShares",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 746,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "newBidId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 751,
        "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
        "label": "bids",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Bid)765_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)670": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(BidStatus)755": {
        "encoding": "inplace",
        "label": "enum GuildAuctionQueue.BidStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Bid)765_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GuildAuctionQueue.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)765_storage"
      },
      "t_struct(Bid)765_storage": {
        "encoding": "inplace",
        "label": "struct GuildAuctionQueue.Bid",
        "members": [
          {
            "astId": 757,
            "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 759,
            "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
            "label": "submitter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 761,
            "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
            "label": "createdAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 764,
            "contract": "contracts/GuildAuctionQueue.sol:GuildAuctionQueue",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(BidStatus)755"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}