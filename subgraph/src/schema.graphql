type Queue @entity {
	id: ID!
	token: Bytes!
	owner: Bytes!
	destination: Bytes!
	lockupPeriod: BigInt!
	minShares: BigInt!
	minBid: BigInt!
	accepterType: AccepterType!
	network: String!
	bids: [Bid!]! @derivedFrom(field: "queue")
	minBidChanges: [MinBidChange!] @derivedFrom(field: "queue")
}

enum BidStatus {
	queued
	accepted
	canceled
}

enum AccepterType {
	owner
	molochMembers
}

type Bid @entity {
	id: ID!
	amount: BigInt!
	queue: Queue!
	submitter: Submitter!
	accepter: Accepter
	status: BidStatus!
	details: Bytes!
	increases: [BidIncrease!] @derivedFrom(field: "bid")
	withdraws: [BidWithdraw!] @derivedFrom(field: "bid")
	createdAt: BigInt! # seconds since epoch
	createTxHash: Bytes!
	acceptedAt: BigInt # seconds since epoch
	acceptTxHash: Bytes
	canceledAt: BigInt # seconds since epoch
	cancelTxHash: Bytes
}

type Submitter @entity {
	id: ID!
	bidsSubmitted: [Bid!]! @derivedFrom(field: "submitter")
}

type Accepter @entity {
	id: ID!
	bidsAccepted: [Bid!]! @derivedFrom(field: "accepter")
}

type BidIncrease @entity {
	id: ID!
	increasedBy: Bytes!
	bid: Bid!
	amount: BigInt!
	increasedAt: BigInt!
	increaseTxHash: Bytes!
}

type BidWithdraw @entity {
	id: ID!
	bid: Bid!
	amount: BigInt!
	withdrawnAt: BigInt!
	withdrawTxHash: Bytes!
}

type MinBidChange @entity {
	id: ID!
	oldAmount: BigInt!
	newAmount: BigInt!
	queue: Queue!
	changedAt: BigInt!
	changeTxHash: Bytes!
}
